{
  "title": "RIDAGOP toolkit Process-Schema",
  "description": "A process in the IDS toolkit",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "title": "Name of the process",
      "description": "The name of the process. This is the name for internal identification (although there is only one process)",
      "pattern": "^[a-z_][a-zA-Z0-9_]*$"
    },
    "title": {
      "type": "string",
      "description": "The title of the process"
    },
    "description": {
      "type": "string",
      "description": "A description of the process."
    },
    "comment": {
      "type": "string",
      "description": "A comment for the process. (For other developers)"
    },
    "services": {
      "description": "Services with their UI-elements and activities.",
      "$comment": "types.ts/ProcessServiceType",
      "type": "object",
      "additionalProperties": {
        "description": "Each key specifies the name of a service",
        "$ref": "#/$defs/P-Service"
      },
      "minProperties": 1
    },
    "common": {
      "type": "object",
      "description": "Common activities and ui elements (access to activities of other services)",
      "$comment": "REMOVE DEFAULT",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description for the common part"
        },
        "ui": {
          "type": "object",
          "description": "UI-elements that are available for the activities defined in the common section",
          "default": {},
          "properties": {
            "buttons": {
              "$comment": "this is almost a copy of what is in the services, but with 'activityService' required",
              "type": "object",
              "description": "UI-Buttons. These buttons can trigger activities of all services of this process.",
              "additionalProperties": {
                "type": "object",
                "description": "key is the name of the button",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The label of the button"
                  },
                  "triggerActivity": {
                    "type": "string",
                    "description": "The name of the activity that is triggered. The activity must be of the same service."
                  },
                  "activityService": {
                    "$comment": "activities of other services. ServiceButtons do not have that",
                    "description": "The name of the service that contains the activity that is triggered.",
                    "type": "string"
                  },
                  "triggerSequence": {
                    "type": "string",
                    "description": "The name of the sequence that is triggered. The sequence must be of the same service."
                  }
                },
                "additionalProperties": false,
                "required": [
                  "label",
                  "triggerActivity"
                ]
              }
            }
          }
        },
        "parameters": {
          "type": "object",
          "description": "Parameters that are usable by all activities of this service.",
          "additionalProperties": {
            "$ref": "#/$defs/P-Parameter"
          }
        },
        "activities": {
          "type": "object",
          "description": "Some activities. Consider that the bridge does not have a bridge, so these activities can only have module-functions",
          "additionalProperties": {
            "type": "object",
            "description": "Each key specifies the name of an activity",
            "oneOf": [
              {
                "$ref": "#/$defs/P-Activity"
              },
              {
                "$ref": "#/$defs/P-CommonActivity"
              }
            ]
          }
        },
        "sequences": {
          "type": "object",
          "description": "A sequence is a list of activities. This is for convenience for triggering multiple activities at once.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The user visible title of the sequence"
              },
              "activities": {
                "description": "The list of activities that are executed when the sequence is triggered",
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The name of an activity"
                }
              }
            }
          }
        },
        "autostart": {
          "description": "Activities that are started on page load",
          "anyOf": [
            {
              "type": "string",
              "description": "One activity name"
            },
            {
              "type": "array",
              "description": "A list of activity names",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      }
    },
    "scriptUri": {
      "type": "string",
      "format": "uri-reference",
      "description": "The URI of the script that is used to run the process"
    },
    "uri": {
      "type": "string",
      "$comment": "/DOCS-IGNORE",
      "description": "uri of this process"
    }
  },
  "additionalProperties": false,
  "required": [
    "name",
    "services"
  ],
  "$defs": {
    "P-Service": {
      "type": "object",
      "title": "A service as it is defined in the Process",
      "description": "A service as it is defined in the Process. Includes UI-elements, activities and shared parameters and the bridge.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The user visible title of the service"
        },
        "description": {
          "type": "string",
          "description": "The description of the process page"
        },
        "ui": {
          "default": {},
          "description": "The UI-elements of the service",
          "$ref": "#/$defs/P-ServiceUI"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters that are usable by all activities of this service.",
          "additionalProperties": {
            "$ref": "#/$defs/P-Parameter"
          }
        },
        "autostart": {
          "description": "Activities that are started on page load",
          "anyOf": [
            {
              "type": "string",
              "description": "One activity name"
            },
            {
              "type": "array",
              "description": "A list of activity names",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "bridge": {
          "description": "The bridge of this service.",
          "$ref": "#/$defs/P-BridgeDefinition"
        },
        "activities": {
          "type": "object",
          "description": "The activities of this service",
          "additionalProperties": {
            "description": "Each key specifies the name of an activity",
            "$ref": "#/$defs/P-Activity"
          }
        },
        "sequences": {
          "type": "object",
          "description": "A sequence is a list of activities. This is for convenience for triggering multiple activities at once.",
          "additionalProperties": {
            "type": "object",
            "description": "Each key specifies the name of a sequence",
            "properties": {
              "title": {
                "type": "string",
                "description": "The user visible title of the sequence"
              },
              "activities": {
                "description": "The list of activities that are executed when the sequence is triggered",
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The name of an activity"
                }
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    "P-Activity": {
      "type": "object",
      "$comment": "CommonActivity needs to include the same properties.",
      "description": "An activity which uses the bridge or a module function",
      "properties": {
        "title": {
          "type": "string",
          "description": "The user visible title of the activity"
        },
        "preProcess": {
          "type": "string",
          "description": "a module function that is called before the activity is executed.",
          "$comment": "(name of the moduleFunction. Throwing a Error with cause 'cancel' will cancel the activity"
        },
        "bridgeCapability": {
          "$ref": "capabilities_list.schema.json",
          "description": "The name of the bridge capability that is used to execute the activity."
        },
        "moduleFunction": {
          "type": "string",
          "description": "The name of the module function that should be executed"
        },
        "priority": {
          "type": "integer",
          "$comment": "Check if that is actually needed./DOCS-IGNORE"
        },
        "comment": {
          "type": "string",
          "description": "A comment"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters that are required by this activity.",
          "additionalProperties": {
            "description": "A parameter-name defined by the bridgeCapability or moduleFunction",
            "$ref": "#/$defs/P-Parameter"
          }
        },
        "requestBody": {
          "type": "object",
          "description": "The request body of the activity (only relevant when using OpenAPI execution)",
          "properties": {
            "data": {
              "description": "Used when the body is a JSON object",
              "type": "object",
              "$comment": "LOOK for more in ActivityModels.Activity.mapParameters",
              "properties": {
                "fileInput": {
                  "type": "string",
                  "description": "The name of the file input html-Element."
                },
                "store": {
                  "$ref": "#/$defs/P-StoreAccess",
                  "description": "Some data in the store."
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": {
            "$comment": "all parameter types?",
            "description": "Used when the body is multipart/form-data",
            "type": "object"
          }
        },
        "requiredActivities": {
          "type": "array",
          "description": "A list of activities that must be executed before this activity is executed.",
          "items": {
            "type": "object",
            "description": "An activity that needs to be executed before this activity can be executed.",
            "properties": {
              "serviceName": {
                "type": "string",
                "description": "The name of the service that contains the activity.",
                "$comment": "this should be depending on other services..."
              },
              "activityName": {
                "type": "string",
                "description": "The name of the activity."
              },
              "errorMessage": {
                "type": "string",
                "description": "The error message that is shown when the activity is not executed (only for generated UI)."
              }
            },
            "required": [
              "activityName"
            ]
          }
        },
        "storeResult": {
          "description": "Storing the result of the activity for later use",
          "$ref": "#/$defs/P-Store"
        },
        "subActivities": {
          "type": "object",
          "description": "Sub-activities are activities that are executed after this parent activity is executed.",
          "additionalProperties": {
            "description": "Each key specifies the name of a sub-activity",
            "$ref": "#/$defs/P-Activity"
          }
        },
        "ui": {
          "type": "object",
          "description": "Some UI related settings for the activity.",
          "properties": {
            "includeInStatus": {
              "type": "boolean",
              "description": "If true, the activity is included in the status of the service (default true)."
            },
            "resultAsOutputHtml": {
              "description": "If the result of the activity should be shown on the page. For generated UI, there is a output section for each service. For mapped UI, a string can be used in order to specify the html element (element id).",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "resultAsDynamicUI": {
              "type": "string",
              "description": "The result of this activity is used to generate some new UI-elements. The result data needs to validate against the process-Service UI schema. The string represents the postfix. use empty string for the default position (after the UI) or 'pre' to put it before the UI"
            },
            "resultsAsOpenInput": {
              "$comment": "/DOCS-IGNORE",
              "oneOf": [
                {
                  "type": "boolean",
                  "$comment": "/DOCS-IGNORE"
                },
                {
                  "type": "string",
                  "$comment": "/DOCS-IGNORE",
                  "enum": [
                    "start",
                    "end"
                  ]
                }
              ]
            },
            "alert": {
              "type": "boolean",
              "description": "Configure if the activity should show an alert when it is finished (default on top level activities is true)."
            }
          },
          "additionalProperties": false
        },
        "debug": {
          "type": "object",
          "description": "Some debug related settings for the activity.",
          "properties": {
            "execute": {
              "type": "boolean",
              "description": "If false, the activity is not executed (default true)."
            },
            "resultData": {
              "type": "object",
              "description": "Instead of executing the activity, the resultData is used as the result of the activity."
            }
          }
        }
      },
      "additionalProperties": false,
      "oneOf": [
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity."
            },
            "bridgeCapability": {
              "$ref": "capabilities_list.schema.json",
              "description": "The name of the bridge capability that is used to execute the activity."
            }
          },
          "required": [
            "title",
            "bridgeCapability"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity"
            },
            "moduleFunction": {
              "type": "string",
              "description": "The name of the module function (??? FROM WHERE) that is used to execute the activity"
            }
          },
          "required": [
            "title",
            "moduleFunction"
          ]
        }
      ]
    },
    "P-ServiceUI": {
      "type": "object",
      "description": "The UI of a service. Consider that many of the properties are only relevant when the Ui is generated.",
      "$comment": "Is also used to validate dynamic UIs. So careful with renaming the sub-schema",
      "default": {},
      "properties": {
        "inputFields": {
          "type": "object",
          "description": "Inputfields are text-fields or text-areas.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the input field",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the input field"
              },
              "fromQueryParam": {
                "type": "string",
                "$comment": "maybe just make it a boolean?",
                "description": "If this property is set, the field is initiated with the value of the query parameter."
              },
              "default": {
                "type": "string",
                "description": "The default value of the input field."
              },
              "textArea": {
                "type": "boolean",
                "description": "If true, the input field is a text area (which is nicer for longer inputs."
              },
              "inputActions": {
                "type": "object",
                "description": "Adds a small button next to the input. Clicking that or pressing enter triggers an action.",
                "properties": {
                  "autoAction": {
                    "type": "string",
                    "description": "The name of the action that is triggered.",
                    "$comment": "must exist in process->activities"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        },
        "buttons": {
          "type": "object",
          "description": "Buttons are used to trigger actions.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the button",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the button"
              },
              "triggerActivity": {
                "type": "string",
                "description": "The name of the activity that is triggered. The activity must be of the same service."
              },
              "triggerSequence": {
                "type": "string",
                "description": "The name of the sequence that is triggered. The sequence must be of the same service."
              }
            }
          }
        },
        "checkBoxes": {
          "type": "object",
          "description": "Checkboxes are used to trigger actions.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the checkbox",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the checkbox."
              },
              "default": {
                "type": "boolean",
                "description": "The default value of the checkbox."
              }
            },
            "required": []
          }
        },
        "selects": {
          "type": "object",
          "description": "Selects items.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the select",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the select"
              },
              "options": {
                "type": "array",
                "description": "The options of the select",
                "items": {
                  "type": "object",
                  "description": "An individual option",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "The label of the option visible to the user"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the option"
                    }
                  },
                  "required": [
                    "label",
                    "value"
                  ]
                }
              },
              "default": {
                "type": "string",
                "description": "The default value of the select"
              }
            },
            "additionalProperties": false
          }
        },
        "fileInputs": {
          "type": "object",
          "description": "File inputs are used to upload files.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the file input.",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the file input."
              },
              "accept": {
                "type": "string",
                "description": "The file types that are accepted (MIME type)."
              },
              "binary": {
                "type": "boolean",
                "description": "If true, the file is read as binary. Otherwise it is read as text."
              },
              "readImmediately": {
                "type": "boolean",
                "description": "If true, the file is read immediately. Otherwise it is read when an activity that requires it is triggered."
              },
              "keepAsFile": {
                "type": "boolean",
                "description": "If true, the file is not read but just used like that in a multipart-form."
              }
            },
            "required": []
          }
        }
      },
      "additionalProperties": false
    },
    "P-CommonActivity": {
      "type": "object",
      "description": "A activity in the common section of the process, can be a regular activity or a reference to an activity of any service.",
      "$comment": "Here we allow mixing normal activity-definitions and references at any level (of sub-activities)",
      "oneOf": [
        {
          "$comment": "Currently no UI settings",
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity."
            },
            "preProcess": {
              "type": "string",
              "description": "a module function that is called before the activity is executed.",
              "$comment": "(name of the moduleFunction. Throwing a Error with cause 'cancel' will cancel the activity"
            },
            "bridgeCapability": {
              "$ref": "capabilities_list.schema.json",
              "description": "The name of the bridge capability that is used to execute the activity."
            },
            "moduleFunction": {
              "type": "string",
              "description": "The name of the module function (??? FROM WHERE) that is used to execute the activity"
            },
            "priority": {
              "type": "integer",
              "$comment": "Check if that is actually needed./DOCS-IGNORE"
            },
            "comment": {
              "type": "string",
              "description": "A comment for developers"
            },
            "parameters": {
              "type": "object",
              "description": "Parameters that are required by this activity.",
              "additionalProperties": {
                "$ref": "#/$defs/P-Parameter"
              }
            },
            "requestBody": {
              "type": "object",
              "description": "The request body of the activity (only relevant when using OpenAPI execution)",
              "properties": {
                "data": {
                  "type": "object",
                  "description": "Used when the body is a JSON object",
                  "$comment": "LOOK for more in ActivityModels.Activity.mapParameters",
                  "properties": {
                    "fileInput": {
                      "type": "string",
                      "description": "The name of the file input html-Element."
                    },
                    "store": {
                      "$ref": "#/$defs/P-StoreAccess",
                      "description": "Some data in the store."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": {
                "$comment": "all parameter types?",
                "description": "Used when the body is multipart/form-data",
                "type": "object"
              }
            },
            "requiredActivities": {
              "type": "array",
              "description": "A list of activities that must be executed before this activity is executed.",
              "items": {
                "type": "object",
                "description": "An activity that needs to be executed before this activity can be executed.",
                "properties": {
                  "serviceName": {
                    "type": "string",
                    "description": "The name of the service that contains the activity."
                  },
                  "activityName": {
                    "type": "string",
                    "description": "The name of the activity."
                  }
                },
                "required": [
                  "activityName"
                ]
              }
            },
            "storeResult": {
              "type": "object",
              "description": "Storing the result of the activity for later use. Not exactly like in a service. The context can only be process or activity.",
              "properties": {
                "context": {
                  "type": "string",
                  "description": "The context of the variable.\n\n- Process: Variable is available by all services and their activities.\n\n- Service: Variable is available by all activities of this service.\n\n- Activity: Variable is available to this activity and its sub-activities and deleted afterwards. (default: process)\n",
                  "enum": [
                    "process",
                    "activity"
                  ]
                },
                "key": {
                  "type": "string",
                  "description": "key in the store ( dots are not allowed)",
                  "$comment": "dots are not allowed. (todo) later we can use a path notation",
                  "pattern": "^[^\\.]+$"
                }
              },
              "required": [
                "key"
              ]
            },
            "subActivities": {
              "type": "object",
              "description": "Sub-activities are activities that are executed after this parent activity is executed.",
              "additionalProperties": {
                "description": "Each key specifies the name of a sub-activity (Either a normal activity or a reference)",
                "$ref": "#/$defs/P-CommonActivity"
              }
            },
            "debug": {
              "type": "object",
              "description": "Some debug related settings for the activity.",
              "properties": {
                "execute": {
                  "type": "boolean",
                  "description": "If false, the activity is not executed (default true)."
                },
                "resultData": {
                  "type": "object",
                  "description": "Instead of executing the activity, the resultData is used as the result of the activity."
                }
              }
            }
          },
          "oneOf": [
            {
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the activity."
                },
                "bridgeCapability": {
                  "$ref": "capabilities_list.schema.json",
                  "description": "The bridge-capability that is used for this activity."
                }
              },
              "required": [
                "title",
                "bridgeCapability"
              ]
            },
            {
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the activity."
                },
                "moduleFunction": {
                  "type": "string",
                  "description": "The function that is used to execute the activity."
                }
              },
              "required": [
                "title",
                "moduleFunction"
              ]
            }
          ],
          "additionalProperties": false
        },
        {
          "description": "A reference to a activity that is defined in a service of the process.",
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity"
            },
            "serviceName": {
              "type": "string",
              "description": "The name of the service that has the activity that should be executed."
            },
            "activityName": {
              "type": "string",
              "description": "The name of the activity that should be executed"
            },
            "priority": {
              "type": "integer",
              "$comment": "/DOCS-IGNORE"
            },
            "subActivities": {
              "type": "object",
              "description": "Sub-activities are activities that are executed after this parent activity is executed.",
              "additionalProperties": {
                "oneOf": [
                  {
                    "description": "A normal activity.",
                    "$ref": "#/$defs/P-Activity"
                  },
                  {
                    "$ref": "#/$defs/P-CommonActivity",
                    "description": "An activity of reference activity."
                  }
                ]
              }
            },
            "debug": {
              "type": "object",
              "description": "Some debug related settings for the activity.",
              "properties": {
                "execute": {
                  "type": "boolean",
                  "description": "If false, the activity is not executed (default true)."
                },
                "resultData": {
                  "type": "object",
                  "description": "Instead of executing the activity, the resultData is used as the result of the activity."
                }
              }
            }
          },
          "required": [
            "title",
            "serviceName",
            "activityName"
          ],
          "additionalProperties": false
        }
      ]
    },
    "P-PostProcess": {
      "$comment": "??? Not sure if this is used..",
      "description": "function that processes the activity result before it is stored or passed on to other activities",
      "type": "array",
      "items": {
        "type": "object",
        "$comment": "/DOCS-IGNORE",
        "properties": {
          "functionName": {
            "type": "string"
          },
          "storeKey": {
            "type": "string"
          },
          "cacheKey": {
            "description": "key to store a temporary variable, while running this activity",
            "type": "string"
          },
          "followUpProcesses": {
            "$ref": "#/$defs/P-PostProcess"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/P-Parameter"
            }
          }
        }
      }
    },
    "P-Parameter": {
      "type": "object",
      "$comment": "make this a OneOf...",
      "description": "Parameter for an activity.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the parameter value.",
          "enum": [
            "string",
            "number",
            "boolean"
          ]
        },
        "parent": {
          "const": true,
          "description": "Result from the parent activity passed down (to this sub-activity)"
        },
        "previous": {
          "const": true,
          "description": "Result from the previous sub-activity."
        },
        "field": {
          "type": "string",
          "description": "Data from an Inputfield, Checkbox or Select."
        },
        "queryParam": {
          "type": "string",
          "description": "Data from a URL-query parameter."
        },
        "constant": {
          "type": "string",
          "description": "A constant non changing value specified here."
        },
        "fileInput": {
          "type": "string",
          "description": "Data from a file-input field UI-Element."
        },
        "store": {
          "description": "Data from the store.",
          "$ref": "#/$defs/P-StoreAccess"
        },
        "generate": {
          "type": "object",
          "description": "Generate a value based on an activity.",
          "properties": {
            "bridgeCapability": {
              "type": "string",
              "description": "The name of the bridge capability that is used to execute the activity."
            },
            "moduleFunction": {
              "type": "string",
              "description": "The name of the module function (??? FROM WHERE) that is used to execute the activity"
            },
            "parameters": {
              "type": "object",
              "description": "Parameters that are required by this activity.",
              "additionalProperties": {
                "description": "A parameter-name defined by the bridgeCapability or moduleFunction defined for this 'generate' parameters.",
                "$ref": "#/$defs/P-Parameter"
              }
            }
          }
        },
        "dynamic": {
          "type": "boolean",
          "description": "if true, the parameter is not passed to the activity, but is used to generate a dynamic UI"
        },
        "comment": {
          "type": "string",
          "description": "A comment for other developers."
        },
        "fromQueryParam": {
          "type": "string",
          "description": "Overwrite const with queryParam of this name (works for text inputs and constant) parameters"
        }
      },
      "additionalProperties": false
    },
    "P-ServiceBridge": {
      "type": "object",
      "$comment": "THERE IS A VERY SIMILAR SCHEMA IN PROCESS_PAGE",
      "description": "The bridge for this service.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "description": "The URI of the bridge description json file."
        },
        "instance": {
          "$ref": "bridge.schema.json",
          "description": "The bridge description."
        }
      },
      "oneOf": [
        {
          "properties": {
            "uri": {
              "type": "string",
              "format": "uri-reference",
              "description": "The URI of the bridge description json file."
            }
          },
          "required": [
            "uri"
          ]
        },
        {
          "properties": {
            "instance": {
              "$ref": "bridge.schema.json",
              "description": "The bridge description."
            }
          },
          "required": [
            "instance"
          ]
        }
      ],
      "additionalProperties": false
    },
    "P-BridgeDefinition": {
      "type": "object",
      "description": "The bridge definition, containing the source (either uri or the whole instance) and some additional properties.",
      "properties": {
        "source": {
          "$ref": "#/$defs/P-ServiceBridge",
          "description": "The source (uri or instance)"
        },
        "server": {
          "$ref": "#/$defs/P-BridgeServerHost",
          "description": "The server host of this service bridge."
        },
        "authorization": {
          "type": "object",
          "description": "From where to take the authorization code for OpenAPI bridge. Usually a API/Auth-Token",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
                "description": "A constant value that contains the token (Only recommended for testing purposes)."
              },
              {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "A field (Inputfield UI-Element) that contains the token."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "queryParam": {
                    "type": "string",
                    "description": "A URL-query parameter that contains the token."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "constant": {
                    "type": "string",
                    "description": "A constant value that contains the token (Only recommended for testing purposes)."
                  }
                }
              }
            ]
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "source"
      ]
    },
    "P-BridgeServerHost": {
      "$comment": "taken from process.schema.json#$defs.parameters.additionalProperties.properties",
      "description": "The server host of this service bridge.",
      "oneOf": [
        {
          "type": "string",
          "format": "uri",
          "description": "The server host of this service bridge."
        },
        {
          "type": "object",
          "description": "from a input-field UI-Element (textfield/textarea).",
          "properties": {
            "field": {
              "type": "string",
              "description": "Name of the input-field UI-Element."
            }
          },
          "required": [
            "field"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "queryParam": {
              "type": "string",
              "description": "URL query parameter"
            }
          },
          "required": [
            "queryParam"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "$comment": "a constant non changing value. same as just the string",
          "properties": {
            "constant": {
              "type": "string",
              "format": "uri",
              "description": "a constant non changing value"
            }
          },
          "required": [
            "constant"
          ],
          "additionalProperties": false
        }
      ]
    },
    "P-Store": {
      "type": "object",
      "description": "Description for storing activity results. Results can be stored on 3 levels (context), in order to prevent name collisions: process, service (default), activity.",
      "properties": {
        "context": {
          "type": "string",
          "description": "The context of the variable.\n\n- Process: Variable is available by all services and their activities.\n\n- Service: Variable is available by all activities of this service.\n\n- Activity: Variable is available to this activity and its sub-activities and deleted afterwards. (default: service)\n",
          "enum": [
            "process",
            "service",
            "activity"
          ]
        },
        "key": {
          "type": "string",
          "description": "key in the store ( dots are not allowed)",
          "$comment": "dots are not allowed. (todo) later we can use a path notation",
          "pattern": "^[^\\.]+$"
        }
      },
      "required": [
        "key"
      ],
      "additionalProperties": false
    },
    "P-StoreAccess": {
      "type": "object",
      "description": "Description for accessing a stored value.",
      "properties": {
        "context": {
          "type": "string",
          "description": "From which context to access the variable. See [P-Store](#p-store)",
          "enum": [
            "service",
            "process",
            "activity"
          ],
          "default": "service"
        },
        "key": {
          "type": "string",
          "description": "key in the store"
        },
        "default": {
          "description": "default value if the key is not found"
        }
      },
      "required": [
        "key"
      ],
      "additionalProperties": false
    }
  }
}