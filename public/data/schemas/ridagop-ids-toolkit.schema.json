{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "http://localhost:8080/data/schemas/ridagop-ids-toolkit.schema.json",
  "$comment": "IDSTK Schema",
  "title": "IDSTK Schema",
  "type": "object",
  "properties": {
    "title": {
      "type": "string",
      "description": "The title of the process page"
    },
    "process": {
      "type": "object",
      "title": "Process",
      "description": "The process to be used. Either the full instance or a uri to the process description.",
      "$comment": "formatted like this, there are no strict-mode errors",
      "properties": {
        "comment": {
          "type": "string",
          "description": "A comment for other developers."
        },
        "uri": {
          "type": "string",
          "title": "URI to process",
          "description": "The uri to the process description. (Not required)",
          "format": "uri"
        },
        "instance": {
          "title": "Process instance",
          "description": "The full process instance, which needs to be a valid Process",
          "$ref": "#/$defs/Process"
        }
      },
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "uri": {
              "title": "URI to process",
              "description": "The uri to the process description.",
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "uri"
          ]
        },
        {
          "type": "object",
          "properties": {
            "instance": {
              "title": "Process instance",
              "description": "The full process instance, which needs to be a valid Process",
              "$ref": "#/$defs/Process"
            }
          },
          "required": [
            "instance"
          ]
        }
      ],
      "additionalProperties": false
    },
    "services": {
      "type": "object",
      "title": "Map of services (service-name: description)",
      "description": "Process-page description for the services to be used in the process. The services here must match the services in the process.",
      "additionalProperties": {
        "description": "Keys are service names.",
        "$ref": "#/$defs/PP-Service"
      },
      "minProperties": 1
    },
    "uri": {
      "$comment": "/DOCS-IGNORE. not sure why this is here",
      "type": "string"
    },
    "view": {
      "type": "object",
      "title": "Page view mode",
      "description": "The type property of the view defines if the page view should be generated (build) or if specified ui elements should be mapped to existing ui elements in the html page.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the view ('build' or 'map')",
          "enum": [
            "build",
            "map"
          ]
        }
      }
    },
    "scriptUri": {
      "title": "ProcessPage module",
      "description": "Absolute or relative url to the process-page module. this module will be merged with the process module. Activities can use the module function when they specify a 'moduleFunction' instead of 'bridgeCapability'.",
      "type": "string",
      "format": "uri-reference"
    },
    "common": {
      "type": "object",
      "title": "Common User interface",
      "description": "Settings for the common part. Common activities can reference to all services",
      "properties": {
        "ui": {
          "title": "Common UI settings",
          "description": "Settings of the common UI part",
          "$ref": "#/$defs/PP-UISettings"
        }
      }
    },
    "schemaUri": {
      "title": "Ridagop schema uri",
      "description": "The uri to the RIDAGOP schema to be used. The uri of this file",
      "type": "string"
    },
    "local_prefix_path": {
      "type": "string",
      "title": "Prefix path",
      "description": "Prefix path for all files specified with relative path"
    }
  },
  "required": [
    "process",
    "schemaUri"
  ],
  "additionalProperties": false,
  "$defs": {
    "B-Operation": {
      "type": "object",
      "description": "Specifies an OpenAPI operation that is executed.",
      "examples": [
        {
          "path": "/api/v1/endpoint",
          "method": "get"
        },
        {
          "operationId": "getEndpoint"
        }
      ],
      "$comment": "Use either path+method or operationId.",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path of the OpenAPI operation"
        },
        "method": {
          "type": "string",
          "description": "The method of the OpenAPI operation",
          "enum": [
            "get",
            "post",
            "patch",
            "put",
            "delete"
          ]
        },
        "operationId": {
          "type": "string",
          "description": "The operationId of the OpenAPI operation"
        }
      },
      "anyOf": [
        {
          "properties": {
            "operationId": {
              "type": "string",
              "description": "The operationId of the OpenAPI operation"
            }
          },
          "required": [
            "operationId"
          ]
        },
        {
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the OpenAPI operation"
            },
            "method": {
              "type": "string",
              "description": "The method of the OpenAPI operation",
              "enum": [
                "get",
                "post",
                "patch",
                "put",
                "delete"
              ]
            }
          },
          "required": [
            "path",
            "method"
          ]
        }
      ]
    },
    "Bridge": {
      "title": "RIDAGOP toolkit Bridge-Schema",
      "description": "Describes the capabilities.",
      "type": "object",
      "properties": {
        "execute": {
          "description": "Defines the type of execution. Either by using an OpenAPI-Specification or by using a client library.",
          "oneOf": [
            {
              "type": "object",
              "description": "OpenAPI-Specification",
              "properties": {
                "openapiSchemaUri": {
                  "type": "string",
                  "format": "uri-reference",
                  "description": "The URI of the OpenAPI-Specification."
                }
              },
              "required": [
                "openapiSchemaUri"
              ]
            },
            {
              "type": "object",
              "description": "Client library module",
              "properties": {
                "apiClientModuleUri": {
                  "type": "string",
                  "format": "uri-reference",
                  "description": "The URI of the module that contains the client library."
                }
              },
              "required": [
                "apiClientModuleUri"
              ]
            }
          ]
        },
        "capabilities": {
          "type": "object",
          "$comment": "todo: the EITHER OR DEFINITION with required...",
          "description": "Defines the capabilities of the bridge.",
          "additionalProperties": {
            "type": "object",
            "description": "Each name defines a capability. The allowed names are defined in the capabilities_names_list.json file.",
            "properties": {
              "operation": {
                "description": "Specifies an OpenAPI operation that should be executed.",
                "$ref": "#/$defs/B-Operation"
              },
              "functionName": {
                "description": "Specifies the name of the function (in case of a client library).",
                "type": "string"
              },
              "postProcess": {
                "$comment": "function in the supportModule. Not sure if this is implemented /DOCS-IGNORE",
                "type": "string"
              }
            },
            "anyOf": [
              {
                "properties": {
                  "operation": {
                    "$comment": "in case OpenAPI ",
                    "$ref": "#/$defs/B-Operation"
                  }
                },
                "required": [
                  "operation"
                ]
              },
              {
                "properties": {
                  "functionName": {
                    "$comment": "in case of a client library",
                    "type": "string"
                  }
                },
                "required": [
                  "functionName"
                ]
              }
            ]
          },
          "propertyNames": {
            "$ref": "#/$defs/CapabilityNames"
          }
        },
        "errorMessagePath": {
          "type": "string",
          "description": "Relative json-path in the response, where an error-message is located, if the response is not a 2XX answer."
        },
        "supportModuleUri": {
          "type": "string",
          "format": "uri",
          "description": "The URI of the module that contains the support functions."
        },
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "$comment": "/DOCS-IGNORE"
        }
      },
      "required": [
        "capabilities",
        "execute"
      ],
      "additionalProperties": false
    },
    "P-Service": {
      "type": "object",
      "title": "A service as it is defined in the Process",
      "description": "A service as it is defined in the Process. Includes UI-elements, activities and shared parameters and the bridge.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The user visible title of the service"
        },
        "ui": {
          "default": {},
          "description": "The UI-elements of the service",
          "$ref": "#/$defs/P-ServiceUI"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters that are usable by all activities of this service.",
          "additionalProperties": {
            "$ref": "#/$defs/P-Parameter"
          }
        },
        "autostart": {
          "description": "Activities that are started on page load",
          "anyOf": [
            {
              "type": "string",
              "description": "One activity name"
            },
            {
              "type": "array",
              "description": "A list of activity names",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "bridge": {
          "description": "The bridge of this service.",
          "$ref": "#/$defs/P-BridgeDefinition"
        },
        "activities": {
          "type": "object",
          "description": "The activities of this service",
          "additionalProperties": {
            "description": "Each key specifies the name of an activity",
            "$ref": "#/$defs/P-Activity"
          }
        },
        "sequences": {
          "type": "object",
          "description": "A sequence is a list of activities. This is for convenience for tirggereing multiple activities at once.",
          "additionalProperties": {
            "type": "object",
            "description": "Each key specifies the name of a sequence",
            "properties": {
              "title": {
                "type": "string",
                "description": "The user visible title of the sequence"
              },
              "activities": {
                "description": "The list of activities that are executed when the sequence is triggered",
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The name of an activity"
                }
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    "P-Activity": {
      "type": "object",
      "$comment": "CommonActivity needs to include the same properties.",
      "description": "An activity which uses the bridge or a module function",
      "properties": {
        "title": {
          "type": "string",
          "description": "The user visible title of the activity"
        },
        "preProcess": {
          "type": "string",
          "description": "a module function that is called before the activity is executed.",
          "$comment": "(name of the moduleFunction. Throwing a Error with cause 'cancel' will cancel the activity"
        },
        "bridgeCapability": {
          "$ref": "#/$defs/CapabilityNames",
          "description": "The name of the bridge capability that is used to execute the activity."
        },
        "moduleFunction": {
          "type": "string",
          "description": "The name of the module function that should be executed"
        },
        "priority": {
          "type": "integer",
          "$comment": "Check if that is actually needed./DOCS-IGNORE"
        },
        "comment": {
          "type": "string",
          "description": "A comment"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters that are required by this activity.",
          "additionalProperties": {
            "description": "A parameter-name defined by the bridgeCapability or moduleFunction",
            "$ref": "#/$defs/P-Parameter"
          }
        },
        "requestBody": {
          "type": "object",
          "description": "The request body of the activity (only relevant when using OpenAPI execution)",
          "properties": {
            "data": {
              "description": "Used when the body is a JSON object",
              "type": "object",
              "$comment": "LOOK for more in ActivityModels.Activity.mapParameters",
              "properties": {
                "fileInput": {
                  "type": "string",
                  "description": "The name of the file input html-Element."
                },
                "store": {
                  "$ref": "#/$defs/P-StoreAccess",
                  "description": "Some data in the store."
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": {
            "$comment": "all parameter types?",
            "description": "Used when the body is multipart/form-data",
            "type": "object"
          }
        },
        "requiredActivities": {
          "type": "array",
          "description": "A list of activities that must be executed before this activity is executed.",
          "items": {
            "type": "object",
            "description": "An activity that needs to be executed before this activity can be executed.",
            "properties": {
              "serviceName": {
                "type": "string",
                "description": "The name of the service that contains the activity.",
                "$comment": "this should be depending on other services..."
              },
              "activityName": {
                "type": "string",
                "description": "The name of the activity."
              },
              "errorMessage": {
                "type": "string",
                "description": "The error message that is shown when the activity is not executed (only for generated UI)."
              }
            },
            "required": [
              "activityName"
            ]
          }
        },
        "storeResult": {
          "description": "Storing the result of the activity for later use",
          "$ref": "#/$defs/P-Store"
        },
        "subActivities": {
          "type": "object",
          "description": "Sub-activities are activities that are executed after this parent activity is executed.",
          "additionalProperties": {
            "description": "Each key specifies the name of a sub-activity",
            "$ref": "#/$defs/P-Activity"
          }
        },
        "ui": {
          "type": "object",
          "description": "Some UI related settings for the activity.",
          "properties": {
            "includeInStatus": {
              "type": "boolean",
              "description": "If true, the activity is included in the status of the service (default true)."
            },
            "resultAsOutputHtml": {
              "description": "If the result of the activity should be shown on the page. For generated UI, there is a output section for each service. For mapped UI, a string can be used in order to specify the html element (element id).",
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "resultAsDynamicUI": {
              "type": "boolean",
              "description": "The result of this activity is used to generate some new UI-elements. The result data needs to validate against the process-Service UI schema."
            },
            "resultsAsOpenInput": {
              "$comment": "/DOCS-IGNORE",
              "oneOf": [
                {
                  "type": "boolean",
                  "$comment": "/DOCS-IGNORE"
                },
                {
                  "type": "string",
                  "$comment": "/DOCS-IGNORE",
                  "enum": [
                    "start",
                    "end"
                  ]
                }
              ]
            },
            "alert": {
              "type": "boolean",
              "description": "Configure if the activity should show an alert when it is finished (default on top level activities is true)."
            }
          },
          "additionalProperties": false
        },
        "debug": {
          "type": "object",
          "description": "Some debug related settings for the activity.",
          "properties": {
            "execute": {
              "type": "boolean",
              "description": "If false, the activity is not executed (default true)."
            },
            "resultData": {
              "type": "object",
              "description": "Instead of executing the activity, the resultData is used as the result of the activity."
            }
          }
        }
      },
      "additionalProperties": false,
      "oneOf": [
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity."
            },
            "bridgeCapability": {
              "$ref": "#/$defs/CapabilityNames",
              "description": "The name of the bridge capability that is used to execute the activity."
            }
          },
          "required": [
            "title",
            "bridgeCapability"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity"
            },
            "moduleFunction": {
              "type": "string",
              "description": "The name of the module function (??? FROM WHERE) that is used to execute the activity"
            }
          },
          "required": [
            "title",
            "moduleFunction"
          ]
        }
      ]
    },
    "P-ServiceUI": {
      "type": "object",
      "description": "The UI of a service. Consider that many of the properties are only relevant when the Ui is generated.",
      "$comment": "Is also used to validate dynamic UIs. So careful with renaming the sub-schema",
      "default": {},
      "properties": {
        "inputFields": {
          "type": "object",
          "description": "Inputfields are text-fields or text-areas.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the input field",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the input field"
              },
              "fromQueryParam": {
                "type": "string",
                "$comment": "maybe just make it a boolean?",
                "description": "If this property is set, the field is initiated with the value of the query parameter."
              },
              "default": {
                "type": "string",
                "description": "The default value of the input field."
              },
              "textArea": {
                "type": "boolean",
                "description": "If true, the input field is a text area (which is nicer for longer inputs."
              },
              "inputActions": {
                "type": "object",
                "description": "Adds a small button next to the input. Clicking that or pressing enter triggers an action.",
                "properties": {
                  "autoAction": {
                    "type": "string",
                    "description": "The name of the action that is triggered.",
                    "$comment": "must exist in process->activities"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        },
        "buttons": {
          "type": "object",
          "description": "Buttons are used to trigger actions.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the button",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the button"
              },
              "triggerActivity": {
                "type": "string",
                "description": "The name of the activity that is triggered. The activity must be of the same service."
              },
              "triggerSequence": {
                "type": "string",
                "description": "The name of the sequence that is triggered. The sequence must be of the same service."
              }
            }
          }
        },
        "checkBoxes": {
          "type": "object",
          "description": "Checkboxes are used to trigger actions.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the checkbox",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the checkbox."
              },
              "default": {
                "type": "boolean",
                "default": false,
                "description": "The default value of the checkbox."
              }
            },
            "required": []
          }
        },
        "selects": {
          "type": "object",
          "description": "Selects items.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the select",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the select"
              },
              "options": {
                "type": "array",
                "description": "The options of the select",
                "items": {
                  "type": "object",
                  "description": "An individual option",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "The label of the option visible to the user"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the option"
                    }
                  },
                  "required": [
                    "label",
                    "value"
                  ]
                }
              },
              "default": {
                "type": "string",
                "description": "The default value of the select"
              }
            },
            "additionalProperties": false
          }
        },
        "fileInputs": {
          "type": "object",
          "description": "File inputs are used to upload files.",
          "additionalProperties": {
            "type": "object",
            "description": "key is the name of the file input.",
            "properties": {
              "label": {
                "type": "string",
                "description": "The label of the file input."
              },
              "accept": {
                "type": "string",
                "description": "The file types that are accepted (MIME type)."
              },
              "binary": {
                "type": "boolean",
                "description": "If true, the file is read as binary. Otherwise it is read as text."
              },
              "readImmediately": {
                "type": "boolean",
                "description": "If true, the file is read immediately. Otherwise it is read when an activity that requires it is triggered."
              },
              "keepAsFile": {
                "type": "boolean",
                "description": "If true, the file is not read but just used like that in a multipart-form."
              }
            },
            "required": []
          }
        }
      },
      "additionalProperties": false
    },
    "P-CommonActivity": {
      "type": "object",
      "description": "A activity in the common section of the process, can be a regular activity or a reference to an activity of any service.",
      "$comment": "Here we allow mixing normal activity-definitions and references at any level (of sub-activities)",
      "oneOf": [
        {
          "$comment": "Currently no UI settings",
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity."
            },
            "preProcess": {
              "type": "string",
              "description": "a module function that is called before the activity is executed.",
              "$comment": "(name of the moduleFunction. Throwing a Error with cause 'cancel' will cancel the activity"
            },
            "bridgeCapability": {
              "$ref": "#/$defs/CapabilityNames",
              "description": "The name of the bridge capability that is used to execute the activity."
            },
            "moduleFunction": {
              "type": "string",
              "description": "The name of the module function (??? FROM WHERE) that is used to execute the activity"
            },
            "priority": {
              "type": "integer",
              "$comment": "Check if that is actually needed./DOCS-IGNORE"
            },
            "comment": {
              "type": "string",
              "description": "A comment for developers"
            },
            "parameters": {
              "type": "object",
              "description": "Parameters that are required by this activity.",
              "additionalProperties": {
                "$ref": "#/$defs/P-Parameter"
              }
            },
            "requestBody": {
              "type": "object",
              "description": "The request body of the activity (only relevant when using OpenAPI execution)",
              "properties": {
                "data": {
                  "type": "object",
                  "description": "Used when the body is a JSON object",
                  "$comment": "LOOK for more in ActivityModels.Activity.mapParameters",
                  "properties": {
                    "fileInput": {
                      "type": "string",
                      "description": "The name of the file input html-Element."
                    },
                    "store": {
                      "$ref": "#/$defs/P-StoreAccess",
                      "description": "Some data in the store."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": {
                "$comment": "all parameter types?",
                "description": "Used when the body is multipart/form-data",
                "type": "object"
              }
            },
            "requiredActivities": {
              "type": "array",
              "description": "A list of activities that must be executed before this activity is executed.",
              "items": {
                "type": "object",
                "description": "An activity that needs to be executed before this activity can be executed.",
                "properties": {
                  "serviceName": {
                    "type": "string",
                    "description": "The name of the service that contains the activity."
                  },
                  "activityName": {
                    "type": "string",
                    "description": "The name of the activity."
                  }
                },
                "required": [
                  "activityName"
                ]
              }
            },
            "storeResult": {
              "type": "object",
              "description": "Storing the result of the activity for later use. Not exactly like in a service. The context can only be process or activity.",
              "properties": {
                "context": {
                  "type": "string",
                  "description": "The context of the variable.\n\n- Process: Variable is available by all services and their activities.\n\n- Service: Variable is available by all activities of this service.\n\n- Activity: Variable is available to this activity and its sub-activities and deleted afterwards.\n",
                  "enum": [
                    "process",
                    "activity"
                  ],
                  "default": "service"
                },
                "key": {
                  "type": "string",
                  "description": "key in the store ( dots are not allowed)",
                  "$comment": "dots are not allowed. (todo) later we can use a path notation",
                  "pattern": "^[^\\.]+$"
                }
              },
              "required": [
                "key"
              ]
            },
            "subActivities": {
              "type": "object",
              "description": "Sub-activities are activities that are executed after this parent activity is executed.",
              "additionalProperties": {
                "description": "Each key specifies the name of a sub-activity (Either a normal activity or a reference)",
                "$ref": "#/$defs/P-CommonActivity"
              }
            },
            "debug": {
              "type": "object",
              "description": "Some debug related settings for the activity.",
              "properties": {
                "execute": {
                  "type": "boolean",
                  "description": "If false, the activity is not executed (default true)."
                },
                "resultData": {
                  "type": "object",
                  "description": "Instead of executing the activity, the resultData is used as the result of the activity."
                }
              }
            }
          },
          "oneOf": [
            {
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the activity."
                },
                "bridgeCapability": {
                  "$ref": "#/$defs/CapabilityNames",
                  "description": "The bridge-capability that is used for this activity."
                }
              },
              "required": [
                "title",
                "bridgeCapability"
              ]
            },
            {
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the activity."
                },
                "moduleFunction": {
                  "type": "string",
                  "description": "The function that is used to execute the activity."
                }
              },
              "required": [
                "title",
                "moduleFunction"
              ]
            }
          ],
          "additionalProperties": false
        },
        {
          "description": "A reference to a activity that is defined in a service of the process.",
          "properties": {
            "title": {
              "type": "string",
              "description": "The user visible title of the activity"
            },
            "serviceName": {
              "type": "string",
              "description": "The name of the service that has the activity that should be executed."
            },
            "activityName": {
              "type": "string",
              "description": "The name of the activity that should be executed"
            },
            "priority": {
              "type": "integer",
              "$comment": "/DOCS-IGNORE"
            },
            "subActivities": {
              "type": "object",
              "description": "Sub-activities are activities that are executed after this parent activity is executed.",
              "additionalProperties": {
                "oneOf": [
                  {
                    "description": "A normal activity.",
                    "$ref": "#/$defs/P-Activity"
                  },
                  {
                    "$ref": "#/$defs/P-CommonActivity",
                    "description": "An activity of reference activity."
                  }
                ]
              }
            },
            "debug": {
              "type": "object",
              "description": "Some debug related settings for the activity.",
              "properties": {
                "execute": {
                  "type": "boolean",
                  "description": "If false, the activity is not executed (default true)."
                },
                "resultData": {
                  "type": "object",
                  "description": "Instead of executing the activity, the resultData is used as the result of the activity."
                }
              }
            }
          },
          "required": [
            "title",
            "serviceName",
            "activityName"
          ],
          "additionalProperties": false
        }
      ]
    },
    "P-PostProcess": {
      "$comment": "??? Not sure if this is used..",
      "description": "function that processes the activity result before it is stored or passed on to other activities",
      "type": "array",
      "items": {
        "type": "object",
        "$comment": "/DOCS-IGNORE",
        "properties": {
          "functionName": {
            "type": "string"
          },
          "storeKey": {
            "type": "string"
          },
          "cacheKey": {
            "description": "key to store a temporary variable, while running this activity",
            "type": "string"
          },
          "followUpProcesses": {
            "$ref": "#/$defs/P-PostProcess"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/P-Parameter"
            }
          }
        }
      }
    },
    "P-Parameter": {
      "type": "object",
      "$comment": "make this a OneOf...",
      "description": "Parameter for an activity.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the parameter value.",
          "enum": [
            "string",
            "number",
            "boolean"
          ]
        },
        "parent": {
          "const": true,
          "description": "Result from the parent activity passed down (to this sub-activity)"
        },
        "previous": {
          "const": true,
          "description": "Result from the previous sub-activity."
        },
        "field": {
          "type": "string",
          "description": "Data from an Inputfield, Checkbox or Select."
        },
        "queryParam": {
          "type": "string",
          "description": "Data from a URL-query parameter."
        },
        "constant": {
          "type": "string",
          "description": "A constant non changing value specified here."
        },
        "fileInput": {
          "type": "string",
          "description": "Data from a file-input field UI-Element."
        },
        "store": {
          "description": "Data from the store.",
          "$ref": "#/$defs/P-StoreAccess"
        },
        "generate": {
          "type": "object",
          "description": "Generate a value based on an activity.",
          "properties": {
            "bridgeCapability": {
              "type": "string",
              "description": "The name of the bridge capability that is used to execute the activity."
            },
            "moduleFunction": {
              "type": "string",
              "description": "The name of the module function (??? FROM WHERE) that is used to execute the activity"
            },
            "parameters": {
              "type": "object",
              "description": "Parameters that are required by this activity.",
              "additionalProperties": {
                "description": "A parameter-name defined by the bridgeCapability or moduleFunction defined for this 'generate' parameters.",
                "$ref": "#/$defs/P-Parameter"
              }
            }
          }
        },
        "dynamic": {
          "type": "boolean",
          "description": "if true, the parameter is not passed to the activity, but is used to generate a dynamic UI"
        },
        "comment": {
          "type": "string",
          "description": "A comment for other developers."
        }
      },
      "additionalProperties": false
    },
    "P-ServiceBridge": {
      "type": "object",
      "$comment": "THERE IS A VERY SIMILAR SCHEMA IN PROCESS_PAGE",
      "description": "The bridge for this service.",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-reference",
          "description": "The URI of the bridge description json file."
        },
        "instance": {
          "$ref": "#/$defs/Bridge",
          "description": "The bridge description."
        }
      },
      "oneOf": [
        {
          "properties": {
            "uri": {
              "type": "string",
              "format": "uri-reference",
              "description": "The URI of the bridge description json file."
            }
          },
          "required": [
            "uri"
          ]
        },
        {
          "properties": {
            "instance": {
              "$ref": "#/$defs/Bridge",
              "description": "The bridge description."
            }
          },
          "required": [
            "instance"
          ]
        }
      ],
      "additionalProperties": false
    },
    "P-BridgeDefinition": {
      "type": "object",
      "description": "The bridge definition, containing the source (either uri or the whole instance) and some additional properties.",
      "properties": {
        "source": {
          "$ref": "#/$defs/P-ServiceBridge",
          "description": "The source (uri or instance)"
        },
        "server": {
          "$ref": "#/$defs/P-BridgeServerHost",
          "description": "The server host of this service bridge."
        },
        "authorization": {
          "type": "object",
          "description": "From where to take the authorization code for OpenAPI bridge. Usually a API/Auth-Token",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
                "description": "A constant value that contains the token (Only recommended for testing purposes)."
              },
              {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "A field (Inputfield UI-Element) that contains the token."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "queryParam": {
                    "type": "string",
                    "description": "A URL-query parameter that contains the token."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "constant": {
                    "type": "string",
                    "description": "A constant value that contains the token (Only recommended for testing purposes)."
                  }
                }
              }
            ]
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "source"
      ]
    },
    "P-BridgeServerHost": {
      "$comment": "taken from process.schema.json#$defs.parameters.additionalProperties.properties",
      "description": "The server host of this service bridge.",
      "oneOf": [
        {
          "type": "string",
          "format": "uri",
          "description": "The server host of this service bridge."
        },
        {
          "type": "object",
          "description": "from a input-field UI-Element (textfield/textarea).",
          "properties": {
            "field": {
              "type": "string",
              "description": "Name of the input-field UI-Element."
            }
          },
          "required": [
            "field"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "queryParam": {
              "type": "string",
              "description": "URL query parameter"
            }
          },
          "required": [
            "queryParam"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "$comment": "a constant non changing value. same as just the string",
          "properties": {
            "constant": {
              "type": "string",
              "format": "uri",
              "description": "a constant non changing value"
            }
          },
          "required": [
            "constant"
          ],
          "additionalProperties": false
        }
      ]
    },
    "P-Store": {
      "type": "object",
      "description": "Description for storing activity results. Results can be stored on 3 levels (context), in order to prevent name collisions: process, service (default), activity.",
      "properties": {
        "context": {
          "type": "string",
          "description": "The context of the variable.\n\n- Process: Variable is available by all services and their activities.\n\n- Service: Variable is available by all activities of this service.\n\n- Activity: Variable is available to this activity and its sub-activities and deleted afterwards.\n",
          "enum": [
            "process",
            "service",
            "activity"
          ],
          "default": "service"
        },
        "key": {
          "type": "string",
          "description": "key in the store ( dots are not allowed)",
          "$comment": "dots are not allowed. (todo) later we can use a path notation",
          "pattern": "^[^\\.]+$"
        }
      },
      "required": [
        "key"
      ]
    },
    "P-StoreAccess": {
      "type": "object",
      "description": "Description for accessing a stored value.",
      "properties": {
        "context": {
          "type": "string",
          "description": "From which context to access the variable. See [P-Store](#p-store)",
          "enum": [
            "service",
            "process",
            "activity"
          ],
          "default": "service"
        },
        "key": {
          "type": "string",
          "description": "key in the store"
        }
      },
      "required": [
        "key"
      ]
    },
    "Process": {
      "title": "RIDAGOP toolkit Process-Schema",
      "description": "A process in the IDS toolkit",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the process",
          "description": "The name of the process. This is the name for internal identification (although there is only one process)",
          "pattern": "^[a-z_][a-zA-Z0-9_]*$"
        },
        "title": {
          "type": "string",
          "description": "The title of the process"
        },
        "description": {
          "type": "string",
          "description": "A description of the process. (For other developers)"
        },
        "services": {
          "description": "Services with their UI-elements and activities.",
          "$comment": "types.ts/ProcessServiceType",
          "type": "object",
          "additionalProperties": {
            "description": "Each key specifies the name of a service",
            "$ref": "#/$defs/P-Service"
          },
          "minProperties": 1
        },
        "common": {
          "type": "object",
          "description": "Common activities and ui elements (access to activities of other services)",
          "$comment": "KEEP THE default UP-TO-DATE",
          "default": {
            "ui": {},
            "activities": {}
          },
          "properties": {
            "ui": {
              "type": "object",
              "description": "UI-elements that are available for the activities defined in the common section",
              "default": {},
              "properties": {
                "buttons": {
                  "$comment": "this is almost a copy of what is in the services, but with 'activityService' required",
                  "type": "object",
                  "description": "UI-Buttons. These buttons can trigger activities of all services of this process.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "key is the name of the button",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "The label of the button"
                      },
                      "triggerActivity": {
                        "type": "string",
                        "description": "The name of the activity that is triggered. The activity must be of the same service."
                      },
                      "activityService": {
                        "$comment": "activities of other services. ServiceButtons do not have that",
                        "description": "The name of the service that contains the activity that is triggered.",
                        "type": "string"
                      },
                      "triggerSequence": {
                        "type": "string",
                        "description": "The name of the sequence that is triggered. The sequence must be of the same service."
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "label",
                      "triggerActivity"
                    ]
                  }
                }
              }
            },
            "activities": {
              "type": "object",
              "description": "Some activities. Consider that the bridge does not have a bridge, so these activities can only have module-functions",
              "additionalProperties": {
                "type": "object",
                "description": "Each key specifies the name of an activity",
                "oneOf": [
                  {
                    "$ref": "#/$defs/P-Activity"
                  },
                  {
                    "$ref": "#/$defs/P-CommonActivity"
                  }
                ]
              }
            },
            "sequences": {
              "type": "object",
              "description": "A sequence is a list of activities. This is for convenience for tirggereing multiple activities at once.",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The user visible title of the sequence"
                  },
                  "activities": {
                    "description": "The list of activities that are executed when the sequence is triggered",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The name of an activity"
                    }
                  }
                }
              }
            }
          }
        },
        "scriptUri": {
          "type": "string",
          "format": "uri-reference",
          "description": "The URI of the script that is used to run the process"
        },
        "uri": {
          "type": "string",
          "$comment": "/DOCS-IGNORE",
          "description": "uri of this process"
        }
      },
      "additionalProperties": false,
      "required": [
        "name",
        "services"
      ]
    },
    "PP-Service": {
      "type": "object",
      "title": "A service",
      "description": "A service as it is defined in the ProcessPage. Compared to Services defined in the Process, these cannot define activities",
      "properties": {
        "title": {
          "type": "string",
          "title": "Service title",
          "description": "The title of the service. Overwrites the til"
        },
        "ui": {
          "default": {},
          "title": "Service UI settings",
          "description": "Settings of the service UI part",
          "$ref": "#/$defs/PP-UISettings"
        },
        "parameters": {
          "type": "object",
          "title": "Global service parameters",
          "description": "Parameters that are available to all activities of the service",
          "additionalProperties": {
            "$ref": "#/$defs/P-Parameter"
          }
        },
        "autostart": {
          "title": "Autostart activities",
          "description": "List of activities (names/keys in the the activities objects) that should be started automatically on startup (either a string or a list of strings)",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "bridge": {
          "title": "Bridge definition",
          "description": "The bridge definition for the service",
          "$ref": "#/$defs/P-BridgeDefinition"
        }
      },
      "additionalProperties": false
    },
    "PP-UISettings": {
      "type": "object",
      "title": "UI settings",
      "description": "UI settings",
      "$comment": "default in Service.properties",
      "properties": {
        "sections": {
          "type": "object",
          "title": "Sections of the UI",
          "description": "Each service has three sections: input, output and status.",
          "properties": {
            "input": {
              "type": "object",
              "title": "Input section",
              "description": "The input section of the UI. This section is used to specify all the UI input elements (inputFields, buttons, checkboxes, ...)for the service.",
              "properties": {
                "display": {
                  "title": "Display input section",
                  "description": "Whether to display the input section. Note that the service UI is more elaborate in the process description",
                  "type": "boolean",
                  "default": true
                },
                "inputFields": {
                  "title": "Input fields",
                  "description": "The input fields (textfields) of the service",
                  "$comment": "WHY HERE",
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "default": {
                        "title": "Default value",
                        "description": "Overwrite the default parameter of the process",
                        "type": "string"
                      },
                      "display": {
                        "title": "Display input field",
                        "description": "Whether to display the input field",
                        "type": "boolean",
                        "default": true
                      }
                    }
                  }
                },
                "buttons": {
                  "type": "object",
                  "$comment": "/DOCS-IGNORE not yet implemented"
                },
                "checkBoxes": {
                  "type": "object",
                  "$comment": "/DOCS-IGNOREnot yet implemented"
                },
                "blocks": {
                  "type": "array",
                  "description": "Block are used for generated UI and allows grouping UI-Elements",
                  "items": {
                    "type": "object",
                    "description": "Each item in the list is a block.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the block."
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the block visible in the UI."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the block visible in the UI."
                      },
                      "items": {
                        "type": "array",
                        "description": "List of items in the UI block. Each item is a UI-Element name",
                        "items": {
                          "type": "string",
                          "description": "Name of the UI-Element"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "items"
                    ]
                  }
                }
              }
            },
            "output": {
              "type": "object",
              "title": "Output section",
              "description": "Settings for the output section. This can be used to display results of an activity",
              "properties": {
                "display": {
                  "title": "Display output section",
                  "description": "Whether to display the output section",
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "status": {
              "type": "object",
              "description": "Settings for the status section. This section shows which activities have been executed.",
              "properties": {
                "display": {
                  "type": "boolean",
                  "description": "Whether to display the status section.",
                  "default": true
                }
              }
            }
          },
          "additionalProperties": false
        },
        "display": {
          "title": "Display settings",
          "description": "Whether for the display of the page. This is only relevant when the page is generated (build)",
          "type": "boolean",
          "default": true
        }
      },
      "additionalProperties": false
    },
    "ProcessPage": {
      "$comment": "<ProcessPage>",
      "title": "RIDAGOP toolkit ProcessPage-Schema",
      "description": "A process-page description file for the RIDAGOP toolkit",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the process page"
        },
        "process": {
          "type": "object",
          "title": "Process",
          "description": "The process to be used. Either the full instance or a uri to the process description.",
          "$comment": "formatted like this, there are no strict-mode errors",
          "properties": {
            "comment": {
              "type": "string",
              "description": "A comment for other developers."
            },
            "uri": {
              "type": "string",
              "title": "URI to process",
              "description": "The uri to the process description. (Not required)",
              "format": "uri"
            },
            "instance": {
              "title": "Process instance",
              "description": "The full process instance, which needs to be a valid Process",
              "$ref": "#/$defs/Process"
            }
          },
          "oneOf": [
            {
              "properties": {
                "uri": {
                  "title": "URI to process",
                  "description": "The uri to the process description.",
                  "type": "string",
                  "format": "uri"
                }
              },
              "required": [
                "uri"
              ]
            },
            {
              "properties": {
                "instance": {
                  "title": "Process instance",
                  "description": "The full process instance, which needs to be a valid Process",
                  "$ref": "#/$defs/Process"
                }
              },
              "required": [
                "instance"
              ]
            }
          ],
          "additionalProperties": false
        },
        "services": {
          "type": "object",
          "title": "Map of services (service-name: description)",
          "description": "Process-page description for the services to be used in the process. The services here must match the services in the process.",
          "additionalProperties": {
            "description": "Keys are service names.",
            "$ref": "#/$defs/PP-Service"
          }
        },
        "uri": {
          "$comment": "/DOCS-IGNORE. not sure why this is here",
          "type": "string"
        },
        "view": {
          "type": "object",
          "title": "Page view mode",
          "description": "The type property of the view defines if the page view should be generated (build) or if specified ui elements should be mapped to existing ui elements in the html page.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the view ('build' or 'map')",
              "enum": [
                "build",
                "map"
              ]
            }
          }
        },
        "scriptUri": {
          "title": "ProcessPage module",
          "description": "Absolute or relative url to the process-page module. this module will be merged with the process module. Activities can use the module function when they specify a 'moduleFunction' instead of 'bridgeCapability'.",
          "type": "string",
          "format": "uri-reference"
        },
        "common": {
          "type": "object",
          "title": "Common User interface",
          "description": "Settings for the common part. Common activities can reference to all services",
          "properties": {
            "ui": {
              "title": "Common UI settings",
              "description": "Settings of the common UI part",
              "$ref": "#/$defs/PP-UISettings"
            }
          }
        },
        "schemaUri": {
          "title": "Ridagop schema uri",
          "description": "The uri to the RIDAGOP schema to be used. The uri of this file",
          "type": "string"
        },
        "local_prefix_path": {
          "type": "string",
          "title": "Prefix path",
          "description": "Prefix path for all files specified with relative path"
        }
      },
      "required": [
        "process",
        "schemaUri"
      ],
      "additionalProperties": false
    },
    "CapabilityNames": {
      "enum": [
        "read_dataset",
        "read_dataset_metadata",
        "create_dataset",
        "delete_dataset",
        "list_datasets",
        "publish_dataset",
        "download_dataset_metadata",
        "update_dataset_metadata",
        "read_dataset_file",
        "write_dataset_file",
        "delete_dataset_file",
        "create_dataset_shareUrl",
        "delete_dataset_shareUrl",
        "create_dataset_share_url",
        "get_dataset_share_url",
        "delete_dataset_share_url",
        "list_dataset_files",
        "download_dataset_file",
        "copy_dataset_files"
      ]
    },
    "info": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#info-object",
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "termsOfService": {
          "type": "string",
          "format": "uri"
        },
        "contact": {
          "$ref": "#/$defs/contact"
        },
        "license": {
          "$ref": "#/$defs/license"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "version"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "contact": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#contact-object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "email": {
          "type": "string",
          "format": "email"
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "license": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#license-object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "name"
      ],
      "oneOf": [
        {
          "required": [
            "identifier"
          ]
        },
        {
          "required": [
            "url"
          ]
        }
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "server": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#server-object",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri-reference"
        },
        "description": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/server-variable"
          }
        }
      },
      "required": [
        "url"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "server-variable": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#server-variable-object",
      "type": "object",
      "properties": {
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "default": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "default"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "components": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#components-object",
      "type": "object",
      "properties": {
        "schemas": {
          "type": "object",
          "additionalProperties": {
            "$dynamicRef": "#meta"
          }
        },
        "responses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/response-or-reference"
          }
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/parameter-or-reference"
          }
        },
        "examples": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/example-or-reference"
          }
        },
        "requestBodies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/request-body-or-reference"
          }
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/header-or-reference"
          }
        },
        "securitySchemes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/security-scheme-or-reference"
          }
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/link-or-reference"
          }
        },
        "callbacks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/callbacks-or-reference"
          }
        },
        "pathItems": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/path-item-or-reference"
          }
        }
      },
      "patternProperties": {
        "^(schemas|responses|parameters|examples|requestBodies|headers|securitySchemes|links|callbacks|pathItems)$": {
          "$comment": "Enumerating all of the property names in the regex above is necessary for unevaluatedProperties to work as expected",
          "propertyNames": {
            "pattern": "^[a-zA-Z0-9._-]+$"
          }
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "paths": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#paths-object",
      "type": "object",
      "patternProperties": {
        "^/": {
          "$ref": "#/$defs/path-item"
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "path-item": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#path-item-object",
      "type": "object",
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/server"
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/parameter-or-reference"
          }
        }
      },
      "patternProperties": {
        "^(get|put|post|delete|options|head|patch|trace)$": {
          "$ref": "#/$defs/operation"
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "path-item-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/path-item"
      }
    },
    "operation": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#operation-object",
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/$defs/external-documentation"
        },
        "operationId": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/parameter-or-reference"
          }
        },
        "requestBody": {
          "$ref": "#/$defs/request-body-or-reference"
        },
        "responses": {
          "$ref": "#/$defs/responses"
        },
        "callbacks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/callbacks-or-reference"
          }
        },
        "deprecated": {
          "default": false,
          "type": "boolean"
        },
        "security": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/security-requirement"
          }
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/server"
          }
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "external-documentation": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#external-documentation-object",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "url"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "parameter": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#parameter-object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "in": {
          "enum": [
            "query",
            "header",
            "path",
            "cookie"
          ]
        },
        "description": {
          "type": "string"
        },
        "required": {
          "default": false,
          "type": "boolean"
        },
        "deprecated": {
          "default": false,
          "type": "boolean"
        },
        "schema": {
          "$dynamicRef": "#meta"
        },
        "content": {
          "$ref": "#/$defs/content",
          "minProperties": 1,
          "maxProperties": 1
        }
      },
      "required": [
        "name",
        "in"
      ],
      "oneOf": [
        {
          "required": [
            "schema"
          ]
        },
        {
          "required": [
            "content"
          ]
        }
      ],
      "if": {
        "properties": {
          "in": {
            "const": "query"
          }
        },
        "required": [
          "in"
        ]
      },
      "then": {
        "properties": {
          "allowEmptyValue": {
            "default": false,
            "type": "boolean"
          }
        }
      },
      "dependentSchemas": {
        "schema": {
          "properties": {
            "style": {
              "type": "string"
            },
            "explode": {
              "type": "boolean"
            }
          },
          "allOf": [
            {
              "$ref": "#/$defs/examples"
            },
            {
              "$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path"
            },
            {
              "$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-header"
            },
            {
              "$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-query"
            },
            {
              "$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-cookie"
            },
            {
              "$ref": "#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-form"
            }
          ],
          "$defs": {
            "styles-for-path": {
              "if": {
                "properties": {
                  "in": {
                    "const": "path"
                  }
                },
                "required": [
                  "in"
                ]
              },
              "then": {
                "properties": {
                  "name": {
                    "pattern": "[^/#?]+$"
                  },
                  "style": {
                    "default": "simple",
                    "enum": [
                      "matrix",
                      "label",
                      "simple"
                    ]
                  },
                  "required": {
                    "const": true
                  }
                },
                "required": [
                  "required"
                ]
              }
            },
            "styles-for-header": {
              "if": {
                "properties": {
                  "in": {
                    "const": "header"
                  }
                },
                "required": [
                  "in"
                ]
              },
              "then": {
                "properties": {
                  "style": {
                    "default": "simple",
                    "const": "simple"
                  }
                }
              }
            },
            "styles-for-query": {
              "if": {
                "properties": {
                  "in": {
                    "const": "query"
                  }
                },
                "required": [
                  "in"
                ]
              },
              "then": {
                "properties": {
                  "style": {
                    "default": "form",
                    "enum": [
                      "form",
                      "spaceDelimited",
                      "pipeDelimited",
                      "deepObject"
                    ]
                  },
                  "allowReserved": {
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            },
            "styles-for-cookie": {
              "if": {
                "properties": {
                  "in": {
                    "const": "cookie"
                  }
                },
                "required": [
                  "in"
                ]
              },
              "then": {
                "properties": {
                  "style": {
                    "default": "form",
                    "const": "form"
                  }
                }
              }
            },
            "styles-for-form": {
              "if": {
                "properties": {
                  "style": {
                    "const": "form"
                  }
                },
                "required": [
                  "style"
                ]
              },
              "then": {
                "properties": {
                  "explode": {
                    "default": true
                  }
                }
              },
              "else": {
                "properties": {
                  "explode": {
                    "default": false
                  }
                }
              }
            }
          }
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "parameter-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/parameter"
      }
    },
    "request-body": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#request-body-object",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "content": {
          "$ref": "#/$defs/content"
        },
        "required": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "content"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "request-body-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/request-body"
      }
    },
    "content": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#fixed-fields-10",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/$defs/media-type"
      }
    },
    "media-type": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#media-type-object",
      "type": "object",
      "properties": {
        "schema": {
          "$dynamicRef": "#meta"
        },
        "encoding": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/encoding"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/specification-extensions"
        },
        {
          "$ref": "#/$defs/examples"
        }
      ],
      "unevaluatedProperties": false
    },
    "encoding": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#encoding-object",
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/header-or-reference"
          }
        },
        "style": {
          "default": "form",
          "enum": [
            "form",
            "spaceDelimited",
            "pipeDelimited",
            "deepObject"
          ]
        },
        "explode": {
          "type": "boolean"
        },
        "allowReserved": {
          "default": false,
          "type": "boolean"
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/specification-extensions"
        },
        {
          "$ref": "#/$defs/encoding/$defs/explode-default"
        }
      ],
      "unevaluatedProperties": false,
      "$defs": {
        "explode-default": {
          "if": {
            "properties": {
              "style": {
                "const": "form"
              }
            },
            "required": [
              "style"
            ]
          },
          "then": {
            "properties": {
              "explode": {
                "default": true
              }
            }
          },
          "else": {
            "properties": {
              "explode": {
                "default": false
              }
            }
          }
        }
      }
    },
    "responses": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#responses-object",
      "type": "object",
      "properties": {
        "default": {
          "$ref": "#/$defs/response-or-reference"
        }
      },
      "patternProperties": {
        "^[1-5](?:[0-9]{2}|XX)$": {
          "$ref": "#/$defs/response-or-reference"
        }
      },
      "minProperties": 1,
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "response": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#response-object",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/header-or-reference"
          }
        },
        "content": {
          "$ref": "#/$defs/content"
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/link-or-reference"
          }
        }
      },
      "required": [
        "description"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "response-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/response"
      }
    },
    "callbacks": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#callback-object",
      "type": "object",
      "$ref": "#/$defs/specification-extensions",
      "additionalProperties": {
        "$ref": "#/$defs/path-item-or-reference"
      }
    },
    "callbacks-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/callbacks"
      }
    },
    "example": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#example-object",
      "type": "object",
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": true,
        "externalValue": {
          "type": "string",
          "format": "uri"
        }
      },
      "not": {
        "required": [
          "value",
          "externalValue"
        ]
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "example-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/example"
      }
    },
    "link": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#link-object",
      "type": "object",
      "properties": {
        "operationRef": {
          "type": "string",
          "format": "uri-reference"
        },
        "operationId": true,
        "parameters": {
          "$ref": "#/$defs/map-of-strings"
        },
        "requestBody": true,
        "description": {
          "type": "string"
        },
        "body": {
          "$ref": "#/$defs/server"
        }
      },
      "oneOf": [
        {
          "required": [
            "operationRef"
          ]
        },
        {
          "required": [
            "operationId"
          ]
        }
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "link-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/link"
      }
    },
    "header": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#header-object",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "required": {
          "default": false,
          "type": "boolean"
        },
        "deprecated": {
          "default": false,
          "type": "boolean"
        },
        "schema": {
          "$dynamicRef": "#meta"
        },
        "content": {
          "$ref": "#/$defs/content",
          "minProperties": 1,
          "maxProperties": 1
        }
      },
      "oneOf": [
        {
          "required": [
            "schema"
          ]
        },
        {
          "required": [
            "content"
          ]
        }
      ],
      "dependentSchemas": {
        "schema": {
          "properties": {
            "style": {
              "default": "simple",
              "const": "simple"
            },
            "explode": {
              "default": false,
              "type": "boolean"
            }
          },
          "$ref": "#/$defs/examples"
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "header-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/header"
      }
    },
    "tag": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#tag-object",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/$defs/external-documentation"
        }
      },
      "required": [
        "name"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "reference": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#reference-object",
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string",
          "format": "uri-reference"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "unevaluatedProperties": false
    },
    "schema": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#schema-object",
      "$dynamicAnchor": "meta",
      "type": [
        "object",
        "boolean"
      ]
    },
    "security-scheme": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#security-scheme-object",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "apiKey",
            "http",
            "mutualTLS",
            "oauth2",
            "openIdConnect"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/$defs/specification-extensions"
        },
        {
          "$ref": "#/$defs/security-scheme/$defs/type-apikey"
        },
        {
          "$ref": "#/$defs/security-scheme/$defs/type-http"
        },
        {
          "$ref": "#/$defs/security-scheme/$defs/type-http-bearer"
        },
        {
          "$ref": "#/$defs/security-scheme/$defs/type-oauth2"
        },
        {
          "$ref": "#/$defs/security-scheme/$defs/type-oidc"
        }
      ],
      "unevaluatedProperties": false,
      "$defs": {
        "type-apikey": {
          "if": {
            "properties": {
              "type": {
                "const": "apiKey"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "name": {
                "type": "string"
              },
              "in": {
                "enum": [
                  "query",
                  "header",
                  "cookie"
                ]
              }
            },
            "required": [
              "name",
              "in"
            ]
          }
        },
        "type-http": {
          "if": {
            "properties": {
              "type": {
                "const": "http"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "scheme": {
                "type": "string"
              }
            },
            "required": [
              "scheme"
            ]
          }
        },
        "type-http-bearer": {
          "if": {
            "properties": {
              "type": {
                "const": "http"
              },
              "scheme": {
                "type": "string",
                "pattern": "^[Bb][Ee][Aa][Rr][Ee][Rr]$"
              }
            },
            "required": [
              "type",
              "scheme"
            ]
          },
          "then": {
            "properties": {
              "bearerFormat": {
                "type": "string"
              }
            }
          }
        },
        "type-oauth2": {
          "if": {
            "properties": {
              "type": {
                "const": "oauth2"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "flows": {
                "$ref": "#/$defs/oauth-flows"
              }
            },
            "required": [
              "flows"
            ]
          }
        },
        "type-oidc": {
          "if": {
            "properties": {
              "type": {
                "const": "openIdConnect"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "openIdConnectUrl": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "openIdConnectUrl"
            ]
          }
        }
      }
    },
    "security-scheme-or-reference": {
      "if": {
        "type": "object",
        "required": [
          "$ref"
        ]
      },
      "then": {
        "$ref": "#/$defs/reference"
      },
      "else": {
        "$ref": "#/$defs/security-scheme"
      }
    },
    "oauth-flows": {
      "type": "object",
      "properties": {
        "implicit": {
          "$ref": "#/$defs/oauth-flows/$defs/implicit"
        },
        "password": {
          "$ref": "#/$defs/oauth-flows/$defs/password"
        },
        "clientCredentials": {
          "$ref": "#/$defs/oauth-flows/$defs/client-credentials"
        },
        "authorizationCode": {
          "$ref": "#/$defs/oauth-flows/$defs/authorization-code"
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false,
      "$defs": {
        "implicit": {
          "type": "object",
          "properties": {
            "authorizationUrl": {
              "type": "string",
              "format": "uri"
            },
            "refreshUrl": {
              "type": "string",
              "format": "uri"
            },
            "scopes": {
              "$ref": "#/$defs/map-of-strings"
            }
          },
          "required": [
            "authorizationUrl",
            "scopes"
          ],
          "$ref": "#/$defs/specification-extensions",
          "unevaluatedProperties": false
        },
        "password": {
          "type": "object",
          "properties": {
            "tokenUrl": {
              "type": "string",
              "format": "uri"
            },
            "refreshUrl": {
              "type": "string",
              "format": "uri"
            },
            "scopes": {
              "$ref": "#/$defs/map-of-strings"
            }
          },
          "required": [
            "tokenUrl",
            "scopes"
          ],
          "$ref": "#/$defs/specification-extensions",
          "unevaluatedProperties": false
        },
        "client-credentials": {
          "type": "object",
          "properties": {
            "tokenUrl": {
              "type": "string",
              "format": "uri"
            },
            "refreshUrl": {
              "type": "string",
              "format": "uri"
            },
            "scopes": {
              "$ref": "#/$defs/map-of-strings"
            }
          },
          "required": [
            "tokenUrl",
            "scopes"
          ],
          "$ref": "#/$defs/specification-extensions",
          "unevaluatedProperties": false
        },
        "authorization-code": {
          "type": "object",
          "properties": {
            "authorizationUrl": {
              "type": "string",
              "format": "uri"
            },
            "tokenUrl": {
              "type": "string",
              "format": "uri"
            },
            "refreshUrl": {
              "type": "string",
              "format": "uri"
            },
            "scopes": {
              "$ref": "#/$defs/map-of-strings"
            }
          },
          "required": [
            "authorizationUrl",
            "tokenUrl",
            "scopes"
          ],
          "$ref": "#/$defs/specification-extensions",
          "unevaluatedProperties": false
        }
      }
    },
    "security-requirement": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#security-requirement-object",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "specification-extensions": {
      "$comment": "https://spec.openapis.org/oas/v3.1.0#specification-extensions",
      "patternProperties": {
        "^x-": true
      }
    },
    "examples": {
      "properties": {
        "example": true,
        "examples": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/example-or-reference"
          }
        }
      }
    },
    "map-of-strings": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "OpenApi": {
      "description": "The description of OpenAPI v3.1.x documents without schema validation, as defined by https://spec.openapis.org/oas/v3.1.0",
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "openapi": {
          "type": "string",
          "pattern": "^3\\.1\\.\\d+(-.+)?$"
        },
        "info": {
          "$ref": "#/$defs/info"
        },
        "jsonSchemaDialect": {
          "type": "string",
          "format": "uri",
          "default": "https://spec.openapis.org/oas/3.1/dialect/base"
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/server"
          },
          "default": [
            {
              "url": "/"
            }
          ]
        },
        "paths": {
          "$ref": "#/$defs/paths"
        },
        "webhooks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/path-item-or-reference"
          }
        },
        "components": {
          "$ref": "#/$defs/components"
        },
        "security": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/security-requirement"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/tag"
          }
        },
        "externalDocs": {
          "$ref": "#/$defs/external-documentation"
        }
      },
      "required": [
        "openapi",
        "info"
      ],
      "anyOf": [
        {
          "required": [
            "paths"
          ]
        },
        {
          "required": [
            "components"
          ]
        },
        {
          "required": [
            "webhooks"
          ]
        }
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    }
  }
}